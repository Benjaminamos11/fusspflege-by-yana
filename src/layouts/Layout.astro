---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Professionelle Fusspflege und Maniküre in einer entspannten Atmosphäre" } = Astro.props;
---

<!DOCTYPE html>
<html lang="de" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Lato:wght@300;400;700&family=Bodoni+Moda:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Meta tags for SEO -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    
    <title>{title}</title>

    <style>
      html {
        scroll-behavior: smooth;
      }
      
      body {
        font-family: 'Lato', sans-serif;
      }
      
      .font-montserrat {
        font-family: 'Montserrat', sans-serif;
      }
      
      /* Custom animations */
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out forwards;
      }
      
      /* Intersection Observer animations */
      .fade-in-section {
        opacity: 0;
        transform: translateY(30px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
      }
      
      .fade-in-section.is-visible {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Button hover effects */
      .btn-primary {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
      }
      
      .btn-primary:hover::before {
        left: 100%;
      }
      
      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(212, 175, 55, 0.3);
      }
    </style>
  </head>
  
  <body class="bg-background text-text font-lato">
    <main class="overflow-x-hidden">
      <slot />
    </main>

    <script>
      // Smooth scrolling for anchor links
      const anchorLinks = document.querySelectorAll('a[href^="#"]') as NodeListOf<HTMLAnchorElement>;
      anchorLinks.forEach((anchor) => {
        anchor.addEventListener('click', function (e: Event) {
          e.preventDefault();
          const element = e.currentTarget as HTMLAnchorElement;
          const href = element.getAttribute('href');
          const target = href ? document.querySelector(href) as HTMLElement : null;
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Intersection Observer for fade-in animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
          }
        });
      }, observerOptions);

      // Observe all sections with fade-in-section class
      document.addEventListener('DOMContentLoaded', () => {
        const fadeInSections = document.querySelectorAll('.fade-in-section') as NodeListOf<HTMLElement>;
        fadeInSections.forEach((section) => observer.observe(section));
      });
    </script>
  </body>
</html>
